name: Python Package CI

# 1. Core Workflow Requirements: Triggers
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# 1. Core Workflow Requirements: Concurrency Control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 2. Security: Principle of Least Privilege (PoLP)
permissions:
  contents: read

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    # 1. Core Workflow Requirements: Timeouts
    timeout-minutes: 15
    # 3. Matrix Testing Strategy
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
        os: [ubuntu-latest, macos-latest, windows-2025]

    runs-on: ${{ matrix.os }}

    steps:
    # 2. Security: Action Pinning
    - name: Checkout repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    # 4. Poetry Integration: Install Poetry before setting up Python for caching
    - name: Install Poetry
      run: |
        python3 -m pip install pipx
        pipx install poetry
      shell: bash

    # 4. Poetry Integration: Setup Python and enable caching
    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'

    # 4. Poetry Integration: Environment Dump for Debugging
    - name: Dump environment details
      run: |
        echo "OS/Runner: ${{ runner.os }}"
        echo "Python version:"
        python --version
        echo "Poetry version:"
        poetry --version
        echo "Poetry Environment Info:"
        poetry env info
        echo "PATH:"
        echo $PATH
      shell: bash

    # 4. Poetry Integration: Install Dependencies with high verbosity
    - name: Install dependencies
      run: poetry install --no-interaction -vv --with dev
      shell: bash

    # 4. Poetry Integration: Dependency Verification for Debugging
    - name: Verify Dependency Tree
      run: poetry show --tree
      shell: bash

    # 5a. Test Execution: Run Unit Tests with coverage
    - name: Run Unit Tests
      run: poetry run pytest -vv tests/unit --cov=./ --cov-report=xml:coverage-unit.xml
      shell: bash

    # 5a. Test Execution: Run Integration Tests with coverage
    - name: Run Integration Tests
      run: poetry run pytest -vv tests/integration --cov=./ --cov-report=xml:coverage-integration.xml
      shell: bash

    # 5b. Codecov Upload Strategy: Upload Unit Test coverage
    - name: Upload Unit Test coverage to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage-unit.xml
        flags: ${{ matrix.os }}-py${{ matrix.python-version }}-unit
        fail_ci_if_error: true
        verbose: true

    # 5b. Codecov Upload Strategy: Upload Integration Test coverage
    - name: Upload Integration Test coverage to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage-integration.xml
        flags: ${{ matrix.os }}-py${{ matrix.python-version }}-integration
        fail_ci_if_error: true
        verbose: true

    # 6. Failure Handling: Upload reports and logs on failure
    - name: Upload reports and logs on failure
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: failure()
      with:
        name: ci-failure-reports-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          coverage-unit.xml
          coverage-integration.xml